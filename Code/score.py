# -*- coding: utf-8 -*-
"""Score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siluAzccSgkfMwyaOODCvaW2rw8jrjgM
"""

import pandas as pd
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Dense
from sklearn.model_selection import cross_val_score
from keras.wrappers.scikit_learn import KerasRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split

dados = pd.read_csv('/content/colors  - PÃ¡gina1.csv')
dados.head()

dados.dtypes

x = dados[['H1','H2']]
y = dados['NOTA']

X_train,x_test,y_train,y_test = train_test_split(x,y,test_size= 0.30, random_state= 515)

def network(optimizer,loss,activation,neurons):
  model = Sequential()
  model.add(Dense(units = 25, activation= activation, input_dim = 2))
  model.add(Dense(units = 25, activation= activation))
  model.add(Dense(units = 1, activation = 'linear'))
  model.compile(loss = loss, optimizer = optimizer, metrics = ['mean_absolute_error'])
  return model

regressor = KerasRegressor(build_fn= network)
parameters = {'batch_size':[5,10],
              'epochs':[100,150],
              'activation':['relu','tanh'],
              'neurons':[30,15],
              'loss':['mean_squared_error','mean_absolute_error'],
              'optimizer':['adam','sgd']}

grid_search = GridSearchCV(estimator=regressor,param_grid=parameters,scoring='neg_mean_absolute_error',cv = 5)
grid_search.fit(X_train,y_train)

best_parameters = grid_search.best_params_
best_score = grid_search.best_score_
best_parameters

best_model = grid_search.best_estimator_

tensorboard_callback = tf.keras.callbacks.TensorBoard('./logs', histogram_freq=1)
callbacks = [
    
    tensorboard_callback,
    tf.keras.callbacks.ModelCheckpoint('pesos.h5', verbose=1, save_weights_only=True)
     ]

model = Sequential()
model.add(Dense(units = 15, activation='tanh', input_dim = 2))
model.add(Dense(units = 15, activation= 'tanh'))
model.add(Dense(units = 1, activation = 'linear'))
model.compile(loss = 'mean_absolute_error', optimizer = 'sgd', metrics = ['mean_absolute_error'])
model.fit(X_train, y_train, batch_size = 5,
                  epochs = 150, callbacks=callbacks)

model.save('score.h5')